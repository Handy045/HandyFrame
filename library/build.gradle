apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28

    defaultConfig {
        multiDexEnabled true

        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                // 注意此处有顺序要求
                arguments = [targetModuleName: getModuleName().replace("\"", "\'")]
            }
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            buildConfigField "String", getModuleName().replace("\"", ""), getModuleName()

            minifyEnabled false  // 混淆
            zipAlignEnabled true    // Zipalign优化
            shrinkResources false    // 移除无用的resource文件
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "String", getModuleName().replace("\"", ""), getModuleName()

            minifyEnabled false  // 混淆
            zipAlignEnabled true    // Zipalign优化
            shrinkResources false    // 移除无用的resource文件
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        android.libraryVariants.all { variant ->
            variant.outputs.all {
                if (outputFileName.endsWith('.aar')) {
                    if (variant.buildType.name == 'debug') {
                        outputFileName = "${getModuleName().replace("\"", "")}_V${defaultConfig.versionName}_${releaseTime()}_Debug.aar"
                    } else if (variant.buildType.name == 'release') {
                        outputFileName = "${getModuleName().replace("\"", "")}_V${defaultConfig.versionName}_${releaseTime()}_Release.aar"
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets/']
            res.srcDirs = ['src/main/res/', 'src/main/res-icon-google/', 'src/main/res-theme-blue/']
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //==============================
    //          官方支持库
    //==============================
    api 'com.android.support:design:28.0.0'
    api 'com.android.support:support-v4:28.0.0'
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support:cardview-v7:28.0.0'
    api 'com.android.support:recyclerview-v7:28.0.0'
    api 'com.android.support.constraint:constraint-layout:1.1.3'

    //==============================
    //          测试库
    //==============================
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //==============================
    //          基础库
    //==============================
    // TODO HandyBase - https://github.com/Handy045/HandyBasic
    // TODO 已依赖：AndroidUtilCode、Bugly、EventBus、DBFlow、BGASwipeBackLayout
    api 'com.github.Handy045:HandyBasic:1.2.0'
    annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'

    //==============================
    //          框架库
    //==============================
    // TODO Rxjava - https://github.com/ReactiveX/RxJava
    api "io.reactivex.rxjava2:rxjava:2.2.8"
    // TODO Rxandroid - https://github.com/ReactiveX/Rxandroid
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // TODO Rxlife - https://github.com/liujingxing/RxLife
    api 'com.rxjava.rxlife:rxlife:1.0.5'

    //==============================
    //          功能库
    //==============================
    // TODO DebugDB - https://github.com/amitshekhariitbhu/Android-Debug-Database
    api 'com.amitshekhar.android:debug-db:1.0.6'
    // TODO BaseRecyclerViewAdapterHelper  https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'
    // TODO HandyAdapter  https://github.com/Handy045/HandyAdapter
    api 'com.github.Handy045:HandyAdapter:1.0.5'

    //==============================
    //          控件库
    //==============================
    // TODO HandyTitleBar - https://github.com/Handy045/HandyTitleBar
    api 'com.github.Handy045:HandyTitleBar:1.4.1'
    // TODO Banner - https://github.com/bingoogolapple/BGABanner-Android
    api 'cn.bingoogolapple:bga-banner:2.2.6'
    // TODO SmartRefreshLayout - https://github.com/scwang90/SmartRefreshLayout
    api 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
    api 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.5.1'
    // TODO SweetAlertDialog - https://github.com/Handy045/JointSweetAlertDialog
    api 'com.github.cazaea:sweet-alert-dialog:1.0.0'
}

/**
 * 获取当前Module名称
 */
static String getModuleName() {
    return "\"HandyFrame\""
}

/**
 * 获取当前系统时间
 */
static def releaseTime() {
    String data = new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone("GMT+08:00"))
    data = data.replace(":", "")
    data = data.replace("-", "")
    data = data.replace(" ", "")
    data = data.substring(2)
    return data
}

//-------------------- jitPack生成文档 --------------------
tasks.withType(JavaCompile) { //指定编码
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar) { //打包源码
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) { //制作文档(Javadoc)
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
